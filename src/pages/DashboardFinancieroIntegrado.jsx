import React, { useState, useEffect } from 'react';
import { 
  AlertCircle, Calendar, Wallet, PieChart, TrendingUp, TrendingDown,
  RefreshCw, CheckCircle, Clock, ChevronLeft, ChevronRight,
  Database, Search, Bug, Upload, FileText, DollarSign, 
  BarChart3, Target, Activity, Zap, Download, Trash2, Eye
} from 'lucide-react';

// Importaciones existentes de tu sistema Chipax
import chipaxService from '../services/chipaxService';
import ChipaxComprasDebugger from '../components/ChipaxComprasDebugger';
import ChipaxSaldosExplorer from '../components/ChipaxSaldosExplorer';
import SaldosCuentasCorrientes from '../components/SaldosCuentasCorrientes';
import { 
  adaptarCuentasPorCobrar, 
  adaptarCuentasPorPagar,
  filtrarComprasPendientes,
  filtrarComprasPorFecha 
} from '../services/chipaxAdapter';

/**
 * Dashboard Financiero Integrado - PGR Seguridad
 * 
 * VERSI√ìN CORREGIDA - PROBLEMAS SOLUCIONADOS:
 * ‚úÖ Detecci√≥n de bancos por n√∫mero de cuenta espec√≠fico
 * ‚úÖ Procesamiento robusto del Banco de Chile con detecci√≥n din√°mica
 * ‚úÖ Funcionalidad para eliminar cartolas cargadas
 * ‚úÖ C√°lculo correcto de saldos integrados
 * ‚úÖ Manejo de errores mejorado
 */
const DashboardFinancieroIntegrado = ({ onBack, onLogout }) => {
  // ===== ESTADOS (mantener todos igual) =====
  const [saldosBancarios, setSaldosBancarios] = useState([]);
  const [cuentasPorCobrar, setCuentasPorCobrar] = useState([]);
  const [cuentasPorPagar, setCuentasPorPagar] = useState([]);
  const [loading, setLoading] = useState(false);
  const [errors, setErrors] = useState([]);
  
  const [filtroCompras, setFiltroCompras] = useState({
    soloNoPagadas: false,
    fechaInicio: '',
    fechaFin: '',
    folioFiltro: ''
  });

  const [paginacionCompras, setPaginacionCompras] = useState({
    paginaActual: 1,
    itemsPorPagina: 50
  });

  const [paginacionCobrar, setPaginacionCobrar] = useState({
    paginaActual: 1,
    itemsPorPagina: 50
  });

  const [cartolasCargadas, setCartolasCargadas] = useState([]);
  const [movimientosBancarios, setMovimientosBancarios] = useState([]);
  const [saldosTotalesCartolas, setSaldosTotalesCartolas] = useState({});
  const [isLoadingCartola, setIsLoadingCartola] = useState(false);
  const [errorCartola, setErrorCartola] = useState(null);
  
  const [kpisConsolidados, setKpisConsolidados] = useState({});
  const [alertasFinancieras, setAlertasFinancieras] = useState([]);
  const [pestanaActiva, setPestanaActiva] = useState('dashboard');

  // ===== CONFIGURACI√ìN DE PROCESADORES MEJORADA =====
  const PROCESADORES_BANCO = {
    'banco_chile': {
      nombre: 'Banco de Chile',
      identificadores: {
        // ‚úÖ NUEVO: Detectar por n√∫mero de cuenta espec√≠fico
        numerosCuenta: ['00-800-10734-09', '008001073409'],
        // Mantener identificadores existentes como fallback
        archivo: ['emitida', 'banco_chile'],
        contenido: ['pgr seguridad spa', 'banco de chile', 'cheque o cargo', 'deposito o abono'],
        requiere: ['pgr seguridad spa']
      },
      estructura: {
        // ‚úÖ CORREGIDO: Cambiar a detecci√≥n din√°mica para mayor robustez
        tipoHeader: 'dinamico_robusto',
        headerRow: 2,
        dataStartRow: 3,
        buscarDesde: 3,      // Comenzar b√∫squeda desde fila 4
        buscarHasta: 15,     // Buscar hasta fila 15
        columnasMinimas: 4,  // M√≠nimo 4 columnas requeridas
        columnas: {
          fecha: 0,
          descripcion: 1, 
          cargo: 2,
          abono: 3,
          saldo: 4,
          documento: 5
        }
      }
    },
    'bci': {
      nombre: 'BCI',
      identificadores: {
        // ‚úÖ NUEVO: Detectar por n√∫mero de cuenta espec√≠fico
        numerosCuenta: ['89107021'],
        archivo: ['historica', 'cartola'],
        contenido: ['cartola historica', 'cuenta corriente', 'estado de cuenta'],
        excluir: ['pgr seguridad spa', 'banco de chile']
      },
      estructura: {
        tipoHeader: 'dinamico',
        buscarDesde: 8,
        buscarHasta: 25,
        columnasMinimas: 4,
        columnas: {
          fecha: 0,
          descripcion: 1,
          cargo: 2,
          abono: 3,
          saldo: 4
        }
      }
    },
    'santander': {
      nombre: 'Santander',
      identificadores: {
        // ‚úÖ CORREGIDO: N√∫mero de cuenta Santander actualizado
        numerosCuenta: ['70666618', '7066661-8', '0-000-7066661-8'],
        archivo: ['santander'],
        contenido: ['santander chile', 'banco santander'],
        requiere: []  // ‚úÖ CORREGIDO: Quitar requerimiento obligatorio
      },
      estructura: {
        tipoHeader: 'dinamico',
        buscarDesde: 5,
        buscarHasta: 20,
        columnasMinimas: 4,  // ‚úÖ NUEVO: M√≠nimo de columnas
        columnas: {
          fecha: 0,
          descripcion: 1,
          monto: 2,
          saldo: 3
        }
      }
    },
    'internacional': {
      nombre: 'Banco Internacional',
      identificadores: {
        // ‚úÖ NUEVO: Detectar por n√∫mero de cuenta espec√≠fico
        numerosCuenta: ['9117726'],
        archivo: ['internacional'],
        contenido: ['banco internacional'],
        requiere: []
      },
      estructura: {
        tipoHeader: 'dinamico',
        buscarDesde: 3,
        buscarHasta: 20,
        columnasMinimas: 4,
        columnas: {
          fecha: 0,
          descripcion: 1,
          cargo: 2,
          abono: 3,
          saldo: 4
        }
      }
    },
    'generic': {
      nombre: 'Formato Gen√©rico',
      identificadores: {
        numerosCuenta: [],
        archivo: [],
        contenido: [],
        requiere: []
      },
      estructura: {
        tipoHeader: 'dinamico',
        buscarDesde: 3,
        buscarHasta: 20,
        columnasMinimas: 3,
        columnas: {
          fecha: 0,
          descripcion: 1,
          monto: 2,
          saldo: 3
        }
      }
    }
  };

  // ===== FUNCI√ìN CORREGIDA: DETECCI√ìN DE BANCO MEJORADA =====
  const detectarBanco = (nombreArchivo, data) => {
    const archivo = nombreArchivo.toLowerCase();
    const contenido = data.slice(0, 20)
      .map(row => (row || []).join(' ').toLowerCase())
      .join(' ');
    
    console.log(`üìÑ Archivo: "${archivo}"`);
    console.log(`üìÑ Contenido muestra: "${contenido.substring(0, 300)}"`);
    
    // ‚úÖ NUEVO: PASO 1 - Detecci√≥n por n√∫mero de cuenta (m√©todo m√°s preciso)
    console.log('\nüîç FASE 1: Detecci√≥n por n√∫mero de cuenta');
    
    for (const [bancoCodigo, procesador] of Object.entries(PROCESADORES_BANCO)) {
      if (!procesador.identificadores.numerosCuenta || procesador.identificadores.numerosCuenta.length === 0) {
        continue;
      }
      
      for (const numeroCuenta of procesador.identificadores.numerosCuenta) {
        // Buscar n√∫mero de cuenta en el contenido (con y sin guiones)
        const numeroLimpio = numeroCuenta.replace(/[-\s]/g, '');
        const numeroConGuiones = numeroCuenta;
        
        if (contenido.includes(numeroLimpio) || contenido.includes(numeroConGuiones)) {
          console.log(`   üéØ ¬°BANCO DETECTADO POR N√öMERO DE CUENTA!`);
          console.log(`   üè¶ Banco: ${procesador.nombre}`);
          console.log(`   üí≥ N√∫mero de cuenta encontrado: ${numeroCuenta}`);
          console.log('='.repeat(50));
          return procesador;
        }
      }
    }
    
    // ‚úÖ PASO 2 - Detecci√≥n por nombre de archivo MEJORADA
    console.log('\nüîç FASE 2: Detecci√≥n por nombre de archivo');
    
    if (archivo.includes('santander')) {
      console.log(`   üéØ ¬°BANCO DETECTADO POR ARCHIVO: SANTANDER!`);
      console.log('='.repeat(50));
      return PROCESADORES_BANCO.santander;
    }
    
    if (archivo.includes('banco de chile') || archivo.includes('bancodechile') || archivo.includes('emitida')) {
      console.log(`   üéØ ¬°BANCO DETECTADO POR ARCHIVO: BANCO DE CHILE!`);
      console.log('='.repeat(50));
      return PROCESADORES_BANCO.banco_chile;
    }
    
    if (archivo.includes('bci') && !archivo.includes('santander')) {
      console.log(`   üéØ ¬°BANCO DETECTADO POR ARCHIVO: BCI!`);
      console.log('='.repeat(50));
      return PROCESADORES_BANCO.bci;
    }
    
    if (archivo.includes('internacional')) {
      console.log(`   üéØ ¬°BANCO DETECTADO POR ARCHIVO: INTERNACIONAL!`);
      console.log('='.repeat(50));
      return PROCESADORES_BANCO.internacional;
    }
    
    // ‚úÖ PASO 3 - Detecci√≥n por contenido (mejorada con prioridades)
    console.log('\nüîç FASE 3: Detecci√≥n por contenido (fallback)');
    
    // Verificar Santander primero (para evitar confusi√≥n con BCI)
    if (contenido.includes('banco santander') || contenido.includes('santander chile')) {
      console.log(`   üéØ ¬°BANCO DETECTADO POR CONTENIDO: SANTANDER!`);
      console.log('='.repeat(50));
      return PROCESADORES_BANCO.santander;
    }
    
    const bancosPorPrioridad = ['banco_chile', 'bci', 'internacional'];
    
    for (const bancoCodigo of bancosPorPrioridad) {
      const procesador = PROCESADORES_BANCO[bancoCodigo];
      const identificadores = procesador.identificadores;
      
      console.log(`\nüîç Evaluando: ${procesador.nombre}`);
      
      if (identificadores.requiere && identificadores.requiere.length > 0) {
        const tieneRequeridos = identificadores.requiere.every(requerido => 
          contenido.includes(requerido)
        );
        
        if (!tieneRequeridos) {
          console.log(`   ‚ùå No cumple requerimientos: ${identificadores.requiere.join(', ')}`);
          continue;
        }
        console.log(`   ‚úÖ Cumple requerimientos: ${identificadores.requiere.join(', ')}`);
      }
      
      if (identificadores.excluir && identificadores.excluir.length > 0) {
        const tieneExcluidos = identificadores.excluir.some(excluido => 
          contenido.includes(excluido)
        );
        
        if (tieneExcluidos) {
          console.log(`   ‚ùå Contiene t√©rminos excluidos: ${identificadores.excluir.join(', ')}`);
          continue;
        }
        console.log(`   ‚úÖ No contiene t√©rminos excluidos`);
      }
      
      const coincidenciasArchivo = identificadores.archivo.filter(id => 
        archivo.includes(id)
      );
      
      const coincidenciasContenido = identificadores.contenido.filter(id => 
        contenido.includes(id)
      );
      
      console.log(`   üìÅ Coincidencias archivo: ${coincidenciasArchivo.length} (${coincidenciasArchivo.join(', ')})`);
      console.log(`   üìÑ Coincidencias contenido: ${coincidenciasContenido.length} (${coincidenciasContenido.join(', ')})`);
      
      if (coincidenciasArchivo.length > 0 || coincidenciasContenido.length > 0) {
        console.log(`   üéØ ¬°BANCO DETECTADO POR CONTENIDO!`);
        console.log(`   üè¶ Banco: ${procesador.nombre}`);
        console.log('='.repeat(50));
        return procesador;
      }
    }
    
    console.log(`\nüè¶ Usando formato gen√©rico por defecto`);
    console.log('='.repeat(50));
    return PROCESADORES_BANCO.generic;
  };

  // ===== FUNCI√ìN MEJORADA: PROCESAMIENTO ROBUSTO DE MOVIMIENTOS =====
  const procesarMovimientos = (rawData, procesador, nombreArchivo) => {
    console.log('üîÑ PROCESAMIENTO MEJORADO DE MOVIMIENTOS');
    console.log(`üè¶ Banco: ${procesador.nombre}`);
    console.log(`üìä Total filas: ${rawData.length}`);
    
    const movimientos = [];
    let dataStartRow = 0;
    
    // ‚úÖ NUEVO: Procesamiento espec√≠fico para Banco de Chile con detecci√≥n robusta
    if (procesador.estructura.tipoHeader === 'dinamico_robusto') {
      console.log('üîç Detecci√≥n robusta para Banco de Chile...');
      
      const buscarDesde = procesador.estructura.buscarDesde || 3;
      const buscarHasta = Math.min(procesador.estructura.buscarHasta || 15, rawData.length);
      
      console.log(`   üîç Rango de b√∫squeda: filas ${buscarDesde + 1} - ${buscarHasta}`);
      
      // Buscar patr√≥n espec√≠fico del Banco de Chile
      for (let i = buscarDesde; i < buscarHasta; i++) {
        const row = rawData[i];
        if (!row || row.length < 4) continue;
        
        const primeraColumna = (row[0] || '').toString().trim();
        const segundaColumna = (row[1] || '').toString().trim();
        
        // Patrones espec√≠ficos para Banco de Chile
        const tieneFecha = /\d{1,2}[\/\-]\d{1,2}[\/\-]\d{2,4}/.test(primeraColumna) ||
                          (typeof row[0] === 'number' && row[0] > 40000);
        
        const tieneDescripcionValida = segundaColumna.length > 3 && 
                                      !segundaColumna.toLowerCase().includes('fecha') &&
                                      !segundaColumna.toLowerCase().includes('descripcion') &&
                                      !segundaColumna.toLowerCase().includes('periodo') &&
                                      !segundaColumna.toLowerCase().includes('cuenta') &&
                                      !segundaColumna.toLowerCase().includes('oficina') &&
                                      !segundaColumna.toLowerCase().includes('resumen');
        
        const tieneMontos = row.slice(2, 5).some(cell => {
          const numero = parseFloat(String(cell).replace(/[.$,]/g, ''));
          return !isNaN(numero) && numero !== 0;
        });
        
        console.log(`   üìã Fila ${i + 1}: Fecha=${tieneFecha}, Desc="${segundaColumna}" (${tieneDescripcionValida}), Montos=${tieneMontos}`);
        
        if (tieneFecha && tieneDescripcionValida && tieneMontos) {
          dataStartRow = i;
          console.log(`   ‚úÖ Primera fila de datos encontrada en: ${dataStartRow + 1}`);
          break;
        }
      }
      
      if (dataStartRow === 0) {
        console.log('   ‚ùå No se encontr√≥ inicio de datos v√°lido');
        throw new Error(`No se pudo detectar el inicio de datos para ${procesador.nombre}. Verifique el formato del archivo.`);
      }
    }
    // Procesamiento para otros bancos (mantener l√≥gica existente)
    else if (procesador.estructura.tipoHeader === 'fijo') {
      dataStartRow = procesador.estructura.dataStartRow;
      console.log(`üìç Estructura fija - Datos desde fila: ${dataStartRow + 1}`);
    } else {
      console.log('üîç Buscando inicio de datos din√°micamente...');
      
      const buscarDesde = procesador.estructura.buscarDesde || 5;
      const buscarHasta = Math.min(procesador.estructura.buscarHasta || 25, rawData.length);
      
      console.log(`   üîç Rango de b√∫squeda: filas ${buscarDesde + 1} - ${buscarHasta}`);
      
      for (let i = buscarDesde; i < buscarHasta; i++) {
        const row = rawData[i];
        if (!row || row.length < (procesador.estructura.columnasMinimas || 3)) {
          continue;
        }
        
        const primeraColumna = (row[0] || '').toString().trim();
        const segundaColumna = (row[1] || '').toString().trim();
        
        const tieneFecha = /\d{1,2}[\/\-]\d{1,2}[\/\-]\d{2,4}/.test(primeraColumna) ||
                          (typeof row[0] === 'number' && row[0] > 40000);
        
        const tieneDescripcion = segundaColumna.length > 2 && 
                                !segundaColumna.toLowerCase().includes('fecha') &&
                                !segundaColumna.toLowerCase().includes('descripcion') &&
                                !segundaColumna.toLowerCase().includes('periodo');
        
        const tieneMontos = row.slice(2).some(cell => {
          const numero = parseFloat(String(cell).replace(/[.$,]/g, ''));
          return !isNaN(numero) && numero !== 0;
        });
        
        console.log(`   üìã Fila ${i + 1}: Fecha=${tieneFecha}, Desc=${tieneDescripcion}, Montos=${tieneMontos}`);
        
        if (tieneFecha && tieneDescripcion && tieneMontos) {
          dataStartRow = i;
          console.log(`   ‚úÖ Primera fila de datos encontrada en: ${dataStartRow + 1}`);
          break;
        }
      }
      
      if (dataStartRow === 0) {
        console.log('   ‚ùå No se encontr√≥ inicio de datos v√°lido');
        throw new Error(`No se pudo detectar el inicio de datos para ${procesador.nombre}`);
      }
    }
    
    console.log('üí∞ Procesando movimientos...');
    let movimientosValidos = 0;
    let erroresProcesamiento = 0;
    
    for (let i = dataStartRow; i < rawData.length; i++) {
      const row = rawData[i];
      if (!row || row.length < 3) continue;
      
      try {
        const movimiento = parseMovimiento(row, procesador, i, nombreArchivo);
        if (movimiento && movimiento.fecha && movimiento.descripcion) {
          movimientos.push(movimiento);
          movimientosValidos++;
          
          if (movimientosValidos % 10 === 0) {
            console.log(`   üìä Procesados ${movimientosValidos} movimientos...`);
          }
        }
      } catch (error) {
        erroresProcesamiento++;
        if (erroresProcesamiento <= 5) {
          console.warn(`   ‚ö†Ô∏è Error en fila ${i + 1}: ${error.message}`);
        }
      }
    }
    
    console.log(`‚úÖ PROCESAMIENTO COMPLETADO:`);
    console.log(`   üíö Movimientos v√°lidos: ${movimientosValidos}`);
    console.log(`   ‚ö†Ô∏è Errores de procesamiento: ${erroresProcesamiento}`);
    console.log(`   üìä Total filas analizadas: ${rawData.length - dataStartRow}`);
    
    if (movimientosValidos === 0) {
      throw new Error(`No se encontraron movimientos v√°lidos en ${nombreArchivo}. Verifique el formato del archivo.`);
    }
    
    const movimientosOrdenados = movimientos.sort((a, b) => new Date(a.fecha) - new Date(b.fecha));
    console.log(`üéØ Movimientos ordenados por fecha: ${movimientosOrdenados.length}`);
    
    return movimientosOrdenados;
  };

  // ===== FUNCI√ìN MEJORADA: ELIMINAR CARTOLA =====
  const eliminarCartola = (cartolaId) => {
    console.log(`üóëÔ∏è Eliminando cartola ID: ${cartolaId}`);
    
    // Encontrar la cartola a eliminar
    const cartolaAEliminar = cartolasCargadas.find(c => c.id === cartolaId);
    if (!cartolaAEliminar) {
      console.error(`‚ùå Cartola con ID ${cartolaId} no encontrada`);
      return;
    }
    
    // Confirmar eliminaci√≥n con m√°s detalles
    const confirmar = window.confirm(
      `¬øEst√° seguro de eliminar la cartola "${cartolaAEliminar.nombre}"?\n\n` +
      `üè¶ Banco: ${cartolaAEliminar.banco}\n` +
      `üìä Movimientos: ${cartolaAEliminar.movimientos}\n` +
      `üí∞ Saldo: ${formatearMoneda(cartolaAEliminar.saldoFinal || 0)}\n` +
      `üìÖ Cargada: ${new Date(cartolaAEliminar.fechaCarga).toLocaleDateString()}\n\n` +
      `‚ö†Ô∏è Esta acci√≥n no se puede deshacer.`
    );
    
    if (!confirmar) return;
    
    try {
      // Filtrar movimientos bancarios (eliminar movimientos de esta cartola)
      const movimientosFiltrados = movimientosBancarios.filter(mov => 
        mov.archivo !== cartolaAEliminar.nombre
      );
      
      // Filtrar cartolas cargadas
      const cartolasFiltradas = cartolasCargadas.filter(c => c.id !== cartolaId);
      
      // Actualizar estados
      setMovimientosBancarios(movimientosFiltrados);
      setCartolasCargadas(cartolasFiltradas);
      
      // Recalcular saldos totales
      actualizarSaldosTotales(movimientosFiltrados);
      calcularKPIsIntegrados();
      
      // ‚úÖ GUARDADO INTELIGENTE
      const guardadoMovimientos = guardarEnLocalStorage('pgr_movimientos_bancarios', movimientosFiltrados);
      const guardadoCartolas = guardarEnLocalStorage('pgr_cartolas_cargadas', cartolasFiltradas);
      
      console.log(`‚úÖ Cartola "${cartolaAEliminar.nombre}" eliminada exitosamente`);
      console.log(`üìä Movimientos restantes: ${movimientosFiltrados.length}`);
      console.log(`üìÅ Cartolas restantes: ${cartolasFiltradas.length}`);
      
      // Mostrar resultado
      const mensaje = `‚úÖ Cartola eliminada exitosamente:\n\n` +
        `üìÑ "${cartolaAEliminar.nombre}"\n` +
        `üìä Movimientos restantes: ${movimientosFiltrados.length}\n` +
        `üìÅ Cartolas restantes: ${cartolasFiltradas.length}\n` +
        `üíæ Guardado: ${guardadoMovimientos && guardadoCartolas ? 'Exitoso' : 'Solo en memoria'}`;
      
      alert(mensaje);
      
    } catch (error) {
      console.error('‚ùå Error eliminando cartola:', error);
      alert(`‚ùå Error eliminando cartola: ${error.message}`);
    }
  };

  // ===== FUNCI√ìN MEJORADA: ACTUALIZAR SALDOS TOTALES =====
  const actualizarSaldosTotales = (movimientos) => {
    console.log('üìä Actualizando saldos totales con movimientos de cartolas...');
    
    const saldosPorBanco = {};
    
    // Agrupar movimientos por banco
    movimientos.forEach(mov => {
      const banco = mov.banco || 'Desconocido';
      
      if (!saldosPorBanco[banco]) {
        saldosPorBanco[banco] = {
          movimientos: [],
          totalIngresos: 0,
          totalEgresos: 0,
          ultimoSaldo: 0,
          ultimaActualizacion: null
        };
      }
      
      saldosPorBanco[banco].movimientos.push(mov);
      saldosPorBanco[banco].totalIngresos += (mov.abono || 0);
      saldosPorBanco[banco].totalEgresos += (mov.cargo || 0);
      
      // Actualizar √∫ltima actualizaci√≥n
      const fechaMovimiento = new Date(mov.fecha);
      if (!saldosPorBanco[banco].ultimaActualizacion || 
          fechaMovimiento > new Date(saldosPorBanco[banco].ultimaActualizacion)) {
        saldosPorBanco[banco].ultimaActualizacion = mov.fecha;
      }
    });
    
    // ‚úÖ CORREGIDO: Calcular saldo final correctamente
    Object.keys(saldosPorBanco).forEach(banco => {
      const data = saldosPorBanco[banco];
      
      // Ordenar movimientos por fecha
      const movimientosOrdenados = data.movimientos.sort((a, b) => 
        new Date(a.fecha) - new Date(b.fecha)
      );
      
      // Calcular saldo acumulativo
      let saldoAcumulado = 0;
      movimientosOrdenados.forEach(mov => {
        saldoAcumulado += (mov.abono || 0) - (mov.cargo || 0);
        
        // Si el movimiento tiene saldo expl√≠cito, usarlo como referencia
        if (mov.saldo !== undefined && mov.saldo !== null && mov.saldo !== 0) {
          saldoAcumulado = mov.saldo;
        }
      });
      
      data.ultimoSaldo = saldoAcumulado;
      data.flujoNeto = data.totalIngresos - data.totalEgresos;
      
      console.log(`üè¶ ${banco}:`);
      console.log(`   üíö Ingresos: ${data.totalIngresos.toLocaleString('es-CL')}`);
      console.log(`   üí∏ Egresos: ${data.totalEgresos.toLocaleString('es-CL')}`);
      console.log(`   üí∞ Saldo final: ${data.ultimoSaldo.toLocaleString('es-CL')}`);
      console.log(`   üìÖ √öltima actualizaci√≥n: ${data.ultimaActualizacion}`);
    });
    
    setSaldosTotalesCartolas(saldosPorBanco);
    console.log('‚úÖ Saldos totales actualizados');
  };

  // ===== FUNCI√ìN MEJORADA: CALCULAR KPIS INTEGRADOS =====
  const calcularKPIsIntegrados = () => {
    console.log('üìä Calculando KPIs integrados...');
    
    // Saldos de Chipax
    const saldoBancarioChipax = saldosBancarios.reduce((sum, cuenta) => 
      sum + (cuenta.saldoCalculado || 0), 0);
    
    // ‚úÖ CORREGIDO: Saldos de cartolas actualizados
    const saldoBancarioCartolas = Object.values(saldosTotalesCartolas)
      .reduce((sum, banco) => sum + banco.ultimoSaldo, 0);
    
    const totalPorCobrar = cuentasPorCobrar.reduce((sum, cuenta) => 
      sum + (cuenta.saldo || cuenta.monto || 0), 0);
    
    const totalPorPagar = cuentasPorPagar.reduce((sum, cuenta) => 
      sum + (cuenta.monto || 0), 0);
    
    const kpis = {
      liquidezTotal: saldoBancarioChipax + saldoBancarioCartolas,
      saldoChipax: saldoBancarioChipax,
      saldoCartolas: saldoBancarioCartolas, // ‚úÖ NUEVO: Separar saldos para debugging
      coberturaCuentas: totalPorPagar > 0 ? (saldoBancarioCartolas / totalPorPagar) : 0,
      ratioCobranzaPago: totalPorCobrar > 0 && totalPorPagar > 0 ? 
        (totalPorCobrar / totalPorPagar) : 0,
      efectivoOperacional: saldoBancarioCartolas + totalPorCobrar - totalPorPagar,
      ultimaActualizacionChipax: new Date().toISOString(),
      ultimaActualizacionCartolas: Object.values(saldosTotalesCartolas)
        .map(banco => banco.ultimaActualizacion)
        .sort()
        .pop() || null
    };
    
    setKpisConsolidados(kpis);
    
    // Generar alertas
    const alertas = [];
    if (kpis.liquidezTotal < 0) {
      alertas.push({
        tipo: 'error',
        mensaje: 'Liquidez total negativa',
        valor: kpis.liquidezTotal
      });
    }
    
    if (kpis.saldoCartolas === 0 && cartolasCargadas.length > 0) {
      alertas.push({
        tipo: 'warning',
        mensaje: 'Cartolas cargadas pero saldo calculado es cero',
        valor: cartolasCargadas.length
      });
    }
    
    setAlertasFinancieras(alertas);
    
    console.log('‚úÖ KPIs integrados calculados:');
    console.log(`   üí∞ Liquidez total: ${kpis.liquidezTotal.toLocaleString('es-CL')}`);
    console.log(`   üè¶ Saldo Chipax: ${kpis.saldoChipax.toLocaleString('es-CL')}`);
    console.log(`   üìÑ Saldo Cartolas: ${kpis.saldoCartolas.toLocaleString('es-CL')}`);
  };

  // ===== MANTENER TODAS LAS FUNCIONES EXISTENTES IGUAL =====
  
  // ===== FUNCI√ìN CORREGIDA: CARGAR XLSX CON M√öLTIPLES FALLBACKS =====
  const cargarXLSX = async () => {
    console.log('üì¶ Iniciando carga de XLSX con estrategias m√∫ltiples...');
    
    // ‚úÖ ESTRATEGIA 1: Verificar si XLSX ya est√° disponible globalmente
    if (typeof window.XLSX !== 'undefined' && window.XLSX.read) {
      console.log('‚úÖ XLSX encontrado en window.XLSX');
      return window.XLSX;
    }
    
    // ‚úÖ ESTRATEGIA 2: Cargar desde CDN con script tag (m√°s confiable)
    try {
      console.log('üì° Cargando XLSX desde CDN con script tag...');
      
      await new Promise((resolve, reject) => {
        // Verificar si ya existe el script
        if (document.querySelector('script[data-xlsx-loaded]')) {
          console.log('üì¶ Script XLSX ya existe');
          resolve();
          return;
        }
        
        const script = document.createElement('script');
        script.src = 'https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js';
        script.setAttribute('data-xlsx-loaded', 'true');
        script.crossOrigin = 'anonymous';
        
        script.onload = () => {
          console.log('‚úÖ Script XLSX cargado exitosamente');
          resolve();
        };
        
        script.onerror = (error) => {
          console.error('‚ùå Error cargando script XLSX:', error);
          reject(new Error('Error cargando script XLSX desde CDN'));
        };
        
        document.head.appendChild(script);
      });
      
      // Esperar un momento para que la librer√≠a se inicialice
      await new Promise(resolve => setTimeout(resolve, 100));
      
      // Verificar m√∫ltiples formas de acceso
      let XLSX = null;
      
      if (window.XLSX && window.XLSX.read) {
        XLSX = window.XLSX;
        console.log('‚úÖ XLSX disponible en window.XLSX');
      } else if (window.XLSX && window.XLSX.default && window.XLSX.default.read) {
        XLSX = window.XLSX.default;
        console.log('‚úÖ XLSX disponible en window.XLSX.default');
      } else if (window.XLSX && window.XLSX.XLSX && window.XLSX.XLSX.read) {
        XLSX = window.XLSX.XLSX;
        console.log('‚úÖ XLSX disponible en window.XLSX.XLSX');
      }
      
      if (XLSX && typeof XLSX.read === 'function') {
        console.log('‚úÖ XLSX.read confirmado como funci√≥n');
        return XLSX;
      } else {
        throw new Error('XLSX.read no est√° disponible despu√©s de cargar el script');
      }
      
    } catch (scriptError) {
      console.error('‚ùå Estrategia 2 fall√≥:', scriptError);
    }
    
    // ‚úÖ ESTRATEGIA 3: Import din√°mico con diferentes URLs
    const urlsFallback = [
      'https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js',
      'https://unpkg.com/xlsx@0.18.5/dist/xlsx.full.min.js',
      'https://cdn.sheetjs.com/xlsx-0.18.5/package/dist/xlsx.full.min.js'
    ];
    
    for (const url of urlsFallback) {
      try {
        console.log(`üì° Intentando import din√°mico desde: ${url}`);
        
        const module = await import(url);
        let XLSX = null;
        
        // Probar diferentes formas de acceder a XLSX
        if (module.default && module.default.read) {
          XLSX = module.default;
        } else if (module.XLSX && module.XLSX.read) {
          XLSX = module.XLSX;
        } else if (module.read) {
          XLSX = module;
        }
        
        if (XLSX && typeof XLSX.read === 'function') {
          console.log(`‚úÖ XLSX cargado exitosamente desde: ${url}`);
          return XLSX;
        }
        
      } catch (importError) {
        console.warn(`‚ö†Ô∏è Fall√≥ import desde ${url}:`, importError);
      }
    }
    
    // ‚úÖ ESTRATEGIA 4: √öltimo recurso - Error detallado
    throw new Error(`No se pudo cargar la librer√≠a XLSX despu√©s de intentar m√∫ltiples estrategias.

üîß DIAGN√ìSTICO DETALLADO:
‚Ä¢ window.XLSX existe: ${typeof window.XLSX !== 'undefined'}
‚Ä¢ window.XLSX.read existe: ${!!(window.XLSX && window.XLSX.read)}
‚Ä¢ Scripts XLSX en DOM: ${document.querySelectorAll('script[src*="xlsx"]').length}

üí° SOLUCIONES RECOMENDADAS:
1. Recarga la p√°gina completamente (Ctrl+F5)
2. Verifica tu conexi√≥n a internet
3. Intenta en modo inc√≥gnito del navegador
4. Verifica que no haya bloqueadores de contenido activos
5. Si persiste, contacta al administrador del sistema

üåê Estado de la conexi√≥n: ${navigator.onLine ? 'Conectado' : 'Desconectado'}`);
  };

  const parseMonto = (valor) => {
    if (!valor) return 0;
    
    const valorStr = valor.toString().trim();
    if (!valorStr) return 0;
    
    const valorLimpio = valorStr
      .replace(/[^\d,\-\.]/g, '')
      .replace(/(\d)\.(\d{3})/g, '$1$2')
      .replace(',', '.');
    
    const numero = parseFloat(valorLimpio);
    return isNaN(numero) ? 0 : numero;
  };

  // ===== FUNCI√ìN CORREGIDA: PARSEDATE ROBUSTA =====
  const parseDate = (valor) => {
    if (!valor) return null;
    
    console.log(`üîç Parseando fecha: "${valor}" (tipo: ${typeof valor})`);
    
    // ‚úÖ CASO 1: N√∫mero de Excel (fecha serial)
    if (typeof valor === 'number' && valor > 1) {
      console.log(`   üìä Fecha serial de Excel: ${valor}`);
      
      // Diferentes bases de fecha para diferentes sistemas
      let fechaBase;
      if (valor > 40000 && valor < 50000) {
        // Sistema moderno (base 1900)
        fechaBase = new Date(1900, 0, 1);
        fechaBase.setTime(fechaBase.getTime() + (valor - 2) * 86400 * 1000);
      } else if (valor > 25000 && valor < 40000) {
        // Sistema alternativo
        fechaBase = new Date((valor - 25569) * 86400 * 1000);
      } else {
        // Intentar interpretaci√≥n directa
        fechaBase = new Date((valor - 25569) * 86400 * 1000);
      }
      
      if (fechaBase && !isNaN(fechaBase.getTime())) {
        const fechaFormateada = fechaBase.toISOString().split('T')[0];
        console.log(`   ‚úÖ Fecha serial convertida: ${fechaFormateada}`);
        return fechaFormateada;
      }
    }
    
    // ‚úÖ CASO 2: Fecha como string
    const fechaStr = valor.toString().trim();
    if (!fechaStr || fechaStr.length < 6) {
      console.log(`   ‚ùå String de fecha muy corto: "${fechaStr}"`);
      return null;
    }
    
    console.log(`   üìù Procesando string: "${fechaStr}"`);
    
    // Patrones de fecha mejorados y m√°s espec√≠ficos
    const patronesFecha = [
      // DD/MM/YYYY o DD-MM-YYYY
      {
        regex: /^(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{4})$/,
        formato: 'DD/MM/YYYY',
        parser: (match) => ({ dia: parseInt(match[1]), mes: parseInt(match[2]), a√±o: parseInt(match[3]) })
      },
      // DD/MM/YY o DD-MM-YY
      {
        regex: /^(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{2})$/,
        formato: 'DD/MM/YY',
        parser: (match) => ({ 
          dia: parseInt(match[1]), 
          mes: parseInt(match[2]), 
          a√±o: parseInt(match[3]) + (parseInt(match[3]) < 50 ? 2000 : 1900)
        })
      },
      // YYYY/MM/DD o YYYY-MM-DD
      {
        regex: /^(\d{4})[\/\-](\d{1,2})[\/\-](\d{1,2})$/,
        formato: 'YYYY/MM/DD',
        parser: (match) => ({ a√±o: parseInt(match[1]), mes: parseInt(match[2]), dia: parseInt(match[3]) })
      },
      // DD MMM YYYY (ej: 15 ENE 2025)
      {
        regex: /^(\d{1,2})\s+(ENE|FEB|MAR|ABR|MAY|JUN|JUL|AGO|SEP|OCT|NOV|DIC)\s+(\d{4})$/i,
        formato: 'DD MMM YYYY',
        parser: (match) => {
          const meses = {
            'ENE': 1, 'FEB': 2, 'MAR': 3, 'ABR': 4, 'MAY': 5, 'JUN': 6,
            'JUL': 7, 'AGO': 8, 'SEP': 9, 'OCT': 10, 'NOV': 11, 'DIC': 12
          };
          return { 
            dia: parseInt(match[1]), 
            mes: meses[match[2].toUpperCase()], 
            a√±o: parseInt(match[3])
          };
        }
      },
      // Formato ISO: YYYY-MM-DDTHH:mm:ss
      {
        regex: /^(\d{4})-(\d{2})-(\d{2})T/,
        formato: 'ISO',
        parser: (match) => ({ a√±o: parseInt(match[1]), mes: parseInt(match[2]), dia: parseInt(match[3]) })
      }
    ];
    
    for (const patron of patronesFecha) {
      const match = fechaStr.match(patron.regex);
      if (match) {
        console.log(`   üéØ Patr√≥n encontrado: ${patron.formato}`);
        
        try {
          const { dia, mes, a√±o } = patron.parser(match);
          console.log(`   üìÖ Componentes: d√≠a=${dia}, mes=${mes}, a√±o=${a√±o}`);
          
          // Validar componentes de fecha
          if (dia >= 1 && dia <= 31 && mes >= 1 && mes <= 12 && a√±o >= 1900 && a√±o <= 2100) {
            const fecha = new Date(a√±o, mes - 1, dia);
            
            // Verificar que la fecha es v√°lida (ej: no 31 de febrero)
            if (fecha.getFullYear() === a√±o && fecha.getMonth() === mes - 1 && fecha.getDate() === dia) {
              const fechaFormateada = fecha.toISOString().split('T')[0];
              console.log(`   ‚úÖ Fecha v√°lida: ${fechaFormateada}`);
              return fechaFormateada;
            } else {
              console.log(`   ‚ùå Fecha inv√°lida despu√©s de validaci√≥n`);
            }
          } else {
            console.log(`   ‚ùå Componentes fuera de rango: d√≠a=${dia}, mes=${mes}, a√±o=${a√±o}`);
          }
        } catch (error) {
          console.log(`   ‚ùå Error parseando con patr√≥n ${patron.formato}: ${error.message}`);
        }
        break;
      }
    }
    
    console.log(`   ‚ùå No se pudo parsear la fecha: "${fechaStr}"`);
    return null;
  };

  const parseMovimiento = (row, procesador, rowIndex, archivo) => {
    let fecha, descripcion, cargo = 0, abono = 0, saldo = 0, documento = '';
    
    try {
      const columnas = procesador.estructura.columnas;
      
      fecha = parseDate(row[columnas.fecha]);
      if (!fecha) {
        throw new Error(`Fecha inv√°lida en columna ${columnas.fecha}: "${row[columnas.fecha]}"`);
      }
      
      descripcion = (row[columnas.descripcion] || '').toString().trim();
      if (!descripcion || descripcion.length < 2) {
        throw new Error(`Descripci√≥n inv√°lida en columna ${columnas.descripcion}: "${descripcion}"`);
      }
      
      if (procesador.nombre === 'BCI') {
        const valores = row.slice(2).map(cell => parseMonto(cell));
        
        if (valores.length >= 3) {
          cargo = valores[0] || 0;
          abono = valores[1] || 0;
          saldo = valores[2] || 0;
          
          if (cargo !== 0 && abono === 0) {
            if (cargo < 0) {
              abono = Math.abs(cargo);
              cargo = 0;
            }
          }
        } else if (valores.length >= 2) {
          const monto = valores[0];
          saldo = valores[1];
          
          if (monto > 0) {
            abono = monto;
          } else {
            cargo = Math.abs(monto);
          }
        }
      } else {
        cargo = parseMonto(row[columnas.cargo]);
        abono = parseMonto(row[columnas.abono]);
        saldo = parseMonto(row[columnas.saldo]);
        
        if (columnas.documento !== undefined) {
          documento = (row[columnas.documento] || '').toString().trim();
        }
      }
      
      if (cargo === 0 && abono === 0) {
        throw new Error('No se encontraron montos v√°lidos (cargo o abono)');
      }
      
      return {
        fecha: fecha,
        descripcion: descripcion,
        cargo: cargo,
        abono: abono,
        saldo: saldo,
        documento: documento,
        banco: procesador.nombre,
        archivo: archivo,
        fila: rowIndex + 1,
        id: `${archivo}_${rowIndex}_${Date.now()}`
      };
      
    } catch (error) {
      throw new Error(`Fila ${rowIndex + 1}: ${error.message}`);
    }
  };

  const readFileAsArrayBuffer = (file) => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = (event) => resolve(event.target.result);
      reader.onerror = (error) => reject(new Error('Error leyendo el archivo'));
      reader.readAsArrayBuffer(file);
    });
  };

  // ===== FUNCI√ìN DE DIAGN√ìSTICO XLSX =====
  const diagnosticarXLSX = () => {
    console.log('üîç DIAGN√ìSTICO COMPLETO DE XLSX:');
    console.log('=====================================');
    
    // Verificar disponibilidad global
    console.log('üåê Variables globales:');
    console.log(`   window.XLSX: ${typeof window.XLSX}`);
    console.log(`   window.XLSX.read: ${!!(window.XLSX && typeof window.XLSX.read === 'function')}`);
    console.log(`   window.XLSX.utils: ${!!(window.XLSX && window.XLSX.utils)}`);
    
    // Verificar scripts cargados
    const xlsxScripts = document.querySelectorAll('script[src*="xlsx"]');
    console.log(`üìú Scripts XLSX en DOM: ${xlsxScripts.length}`);
    xlsxScripts.forEach((script, index) => {
      console.log(`   Script ${index + 1}: ${script.src}`);
    });
    
    // Verificar conexi√≥n
    console.log(`üåê Estado conexi√≥n: ${navigator.onLine ? 'Conectado' : 'Desconectado'}`);
    
    // Verificar si hay otros objetos XLSX disponibles
    const possibleXLSX = [];
    if (window.XLSX) possibleXLSX.push('window.XLSX');
    if (window.SheetJS) possibleXLSX.push('window.SheetJS');
    if (window.XLSXJS) possibleXLSX.push('window.XLSXJS');
    
    console.log(`üì¶ Objetos XLSX detectados: ${possibleXLSX.join(', ') || 'Ninguno'}`);
    console.log('=====================================');
  };

  // ===== ESTADO PARA MODO DE ALTO RENDIMIENTO =====
  const [modoAltoRendimiento, setModoAltoRendimiento] = useState(false);

  // ===== FUNCI√ìN NUEVA: MANEJO INTELIGENTE DE LOCALSTORAGE SIN LIMITACIONES =====
  const guardarEnLocalStorage = (clave, datos) => {
    // Si est√° en modo de alto rendimiento, no intentar guardar
    if (modoAltoRendimiento) {
      console.log(`üöÄ Modo alto rendimiento activo - saltando guardado de ${clave}`);
      return false;
    }

    try {
      console.log(`üíæ Intentando guardar ${clave}...`);
      
      // Verificar tama√±o de los datos
      const datosString = JSON.stringify(datos);
      const tama√±o = new Blob([datosString]).size;
      const tama√±oMB = (tama√±o / 1024 / 1024).toFixed(2);
      
      console.log(`üìä Tama√±o de datos: ${tama√±oMB} MB`);
      
      // Intentar guardar normalmente primero
      try {
        localStorage.setItem(clave, datosString);
        console.log(`‚úÖ Guardado exitosamente (${tama√±oMB} MB)`);
        return true;
      } catch (firstError) {
        if (firstError.name === 'QuotaExceededError') {
          console.log(`‚ö†Ô∏è LocalStorage lleno, aplicando estrategias de limpieza...`);
          
          // Estrategia 1: Limpiar datos de otros proyectos
          try {
            const clavesAEliminar = [];
            const clavesPGR = [];
            
            for (let i = 0; i < localStorage.length; i++) {
              const clave_actual = localStorage.key(i);
              if (clave_actual) {
                if (clave_actual.startsWith('pgr_')) {
                  clavesPGR.push(clave_actual);
                } else {
                  clavesAEliminar.push(clave_actual);
                }
              }
            }
            
            console.log(`üóëÔ∏è Eliminando ${clavesAEliminar.length} claves de otros proyectos`);
            console.log(`üìÅ Manteniendo ${clavesPGR.length} claves de PGR`);
            
            clavesAEliminar.forEach(k => localStorage.removeItem(k));
            
            // Intentar guardar despu√©s de limpiar
            localStorage.setItem(clave, datosString);
            console.log(`‚úÖ Guardado exitosamente despu√©s de limpieza (${tama√±oMB} MB)`);
            return true;
            
          } catch (secondError) {
            console.log(`‚ö†Ô∏è A√∫n no hay espacio suficiente despu√©s de limpieza`);
            
            // Estrategia 2: Usar compresi√≥n b√°sica (eliminar espacios y agrupar)
            try {
              const datosComprimidos = JSON.stringify(datos, null, 0); // Sin espacios
              localStorage.setItem(clave, datosComprimidos);
              console.log(`‚úÖ Guardado con compresi√≥n b√°sica`);
              return true;
              
            } catch (thirdError) {
              console.log(`‚ö†Ô∏è Incluso con compresi√≥n no hay espacio suficiente`);
              
              // Estrategia 3: Activar modo alto rendimiento autom√°ticamente
              console.log(`üöÄ Activando modo alto rendimiento autom√°ticamente`);
              setModoAltoRendimiento(true);
              return false;
            }
          }
        } else {
          throw firstError;
        }
      }
      
    } catch (error) {
      console.error(`‚ùå Error guardando ${clave}:`, error);
      return false;
    }
  };

  // ===== FUNCI√ìN MEJORADA: PROCESAR CARTOLA CON MANEJO DE MEMORIA =====
  const procesarCartolaBAncaria = async (file) => {
    setIsLoadingCartola(true);
    setErrorCartola(null);

    try {
      console.log(`üîç Procesando cartola: ${file.name}`);
      
      // üÜï DIAGN√ìSTICO INICIAL
      diagnosticarXLSX();
      
      console.log('üì¶ Cargando librer√≠a XLSX...');
      let XLSX;
      
      try {
        XLSX = await cargarXLSX();
        console.log('‚úÖ XLSX cargado exitosamente');
        
        // ‚úÖ VERIFICACI√ìN EXHAUSTIVA
        if (!XLSX) {
          throw new Error('XLSX es null o undefined');
        }
        
        if (typeof XLSX.read !== 'function') {
          console.error('‚ùå XLSX.read no es una funci√≥n:', typeof XLSX.read);
          console.error('‚ùå Propiedades de XLSX:', Object.keys(XLSX));
          throw new Error(`XLSX.read no est√° disponible. Tipo: ${typeof XLSX.read}, Propiedades: ${Object.keys(XLSX).join(', ')}`);
        }
        
        console.log('‚úÖ XLSX.read confirmado como funci√≥n');
        
        // ‚úÖ VERIFICACI√ìN DE OTRAS FUNCIONES NECESARIAS
        if (typeof XLSX.utils?.sheet_to_json !== 'function') {
          console.error('‚ùå XLSX.utils.sheet_to_json no disponible');
          throw new Error('XLSX.utils.sheet_to_json no est√° disponible');
        }
        
        console.log('‚úÖ XLSX.utils.sheet_to_json confirmado');
        
      } catch (xlsxError) {
        console.error('‚ùå Error cargando XLSX:', xlsxError);
        
        // üÜï DIAGN√ìSTICO POST-ERROR
        console.log('üîç DIAGN√ìSTICO POST-ERROR:');
        diagnosticarXLSX();
        
        throw new Error(`No se pudo cargar la librer√≠a XLSX.
        
üîß Posibles soluciones:
‚Ä¢ Recarga la p√°gina completamente (Ctrl+F5)
‚Ä¢ Verifica tu conexi√≥n a internet
‚Ä¢ Intenta en modo inc√≥gnito del navegador
‚Ä¢ Desactiva temporalmente bloqueadores de contenido
‚Ä¢ Espera unos minutos e intenta nuevamente

üìä Error espec√≠fico: ${xlsxError.message}

üîç Estado actual del navegador:
‚Ä¢ XLSX global disponible: ${typeof window.XLSX !== 'undefined'}
‚Ä¢ Conexi√≥n activa: ${navigator.onLine}
‚Ä¢ Scripts XLSX cargados: ${document.querySelectorAll('script[src*="xlsx"]').length}`);
      }
      
      console.log('üìÑ Leyendo archivo Excel...');
      const arrayBuffer = await readFileAsArrayBuffer(file);
      
      console.log('üîß Procesando workbook...');
      
      // ‚úÖ PROCESAMIENTO ROBUSTO DEL WORKBOOK
      let workbook;
      try {
        workbook = XLSX.read(arrayBuffer, {
          cellStyles: true,
          cellFormulas: true,
          cellDates: true,
          dateNF: 'dd/mm/yyyy'  // üÜï Formato de fecha espec√≠fico
        });
        
        console.log('‚úÖ Workbook procesado exitosamente');
        
      } catch (readError) {
        console.error('‚ùå Error leyendo workbook:', readError);
        throw new Error(`Error procesando el archivo Excel: ${readError.message}

üîß Posibles causas:
‚Ä¢ El archivo puede estar corrupto
‚Ä¢ El formato no es compatible (.xlsx, .xls)
‚Ä¢ El archivo est√° protegido con contrase√±a
‚Ä¢ El archivo est√° siendo usado por otra aplicaci√≥n

üí° Intenta:
‚Ä¢ Guardar el archivo en formato .xlsx desde Excel
‚Ä¢ Cerrar el archivo en Excel si est√° abierto
‚Ä¢ Verificar que el archivo no est√© corrupto`);
      }
      
      console.log('üìä Hojas disponibles:', workbook.SheetNames);
      
      const primeraHoja = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[primeraHoja];
      
      let rawData;
      try {
        rawData = XLSX.utils.sheet_to_json(worksheet, { 
          header: 1,
          defval: '',  // üÜï Valor por defecto para celdas vac√≠as
          blankrows: false  // üÜï Omitir filas completamente vac√≠as
        });
        
        console.log(`üìã Total filas extra√≠das: ${rawData.length}`);
        
      } catch (jsonError) {
        console.error('‚ùå Error convirtiendo hoja a JSON:', jsonError);
        throw new Error(`Error convirtiendo datos de Excel: ${jsonError.message}`);
      }
      
      if (rawData.length === 0) {
        throw new Error('El archivo Excel est√° vac√≠o o no contiene datos v√°lidos');
      }
      
      const procesador = detectarBanco(file.name, rawData);
      console.log(`üè¶ Banco detectado: ${procesador.nombre}`);
      
      const movimientos = procesarMovimientos(rawData, procesador, file.name);
      console.log(`‚úÖ Procesados ${movimientos.length} movimientos`);
      
      if (movimientos.length === 0) {
        throw new Error('No se encontraron movimientos v√°lidos en el archivo');
      }
      
      // ‚úÖ PROCESAR TODOS LOS MOVIMIENTOS SIN LIMITACIONES
      console.log(`üìä Procesando TODOS los ${movimientos.length} movimientos para c√°lculo correcto de saldos`);
      
      const estadisticas = calcularEstadisticasCartola(movimientos);
      
      const nuevosMovimientos = [...movimientosBancarios, ...movimientos];
      setMovimientosBancarios(nuevosMovimientos);
      
      const nuevaCartola = {
        id: Date.now(),
        nombre: file.name,
        banco: procesador.nombre,
        fechaCarga: new Date().toISOString(),
        movimientos: movimientos.length,
        ...estadisticas
      };
      
      setCartolasCargadas(prev => [...prev, nuevaCartola]);
      
      actualizarSaldosTotales(nuevosMovimientos);
      calcularKPIsIntegrados();
      
      // ‚úÖ GUARDADO INTELIGENTE EN LOCALSTORAGE (SIN LIMITACIONES)
      const guardadoMovimientos = guardarEnLocalStorage('pgr_movimientos_bancarios', nuevosMovimientos);
      const guardadoCartolas = guardarEnLocalStorage('pgr_cartolas_cargadas', [...cartolasCargadas, nuevaCartola]);
      
      let mensajePersistencia = '';
      if (modoAltoRendimiento) {
        mensajePersistencia = `\n\nüöÄ MODO ALTO RENDIMIENTO ACTIVO:\n‚úÖ Todos los ${movimientos.length} movimientos procesados en memoria\n‚úÖ C√°lculos de saldos 100% precisos\n‚ö° M√°ximo rendimiento sin limitaciones de almacenamiento`;
      } else if (!guardadoMovimientos || !guardadoCartolas) {
        console.log(`‚ö†Ô∏è No se pudo guardar en localStorage, trabajando solo en memoria`);
        mensajePersistencia = `\n\n‚ö†Ô∏è MODO MEMORIA AUTOM√ÅTICO:\n‚Ä¢ Los datos se mantienen solo en memoria durante esta sesi√≥n\n‚Ä¢ Si recargas la p√°gina, se perder√°n\n‚Ä¢ Esto es normal con archivos muy grandes\n‚Ä¢ Todos los movimientos est√°n disponibles para c√°lculos correctos\n\nüí° Tip: Activa "üöÄ Alto Rendimiento" para archivos grandes`;
      } else {
        mensajePersistencia = `\n\n‚úÖ Datos guardados exitosamente en localStorage.`;
      }
      
      console.log(`üéâ Cartola ${file.name} procesada exitosamente`);
      
      // ‚úÖ MOSTRAR RESUMEN COMPLETO DE PROCESAMIENTO
      const resumen = `‚úÖ Cartola procesada exitosamente:

üìÑ Archivo: ${file.name}
üè¶ Banco: ${procesador.nombre}
üìä Movimientos procesados: ${movimientos.length} (TODOS - sin limitaciones)
üí∞ Saldo final: ${formatearMoneda(estadisticas.saldoFinal)}
üíö Total ingresos: ${formatearMoneda(estadisticas.totalIngresos)}
üí∏ Total egresos: ${formatearMoneda(estadisticas.totalEgresos)}
üìà Flujo neto: ${formatearMoneda(estadisticas.flujoNeto)}${mensajePersistencia}

üéØ Los saldos se calcular√°n correctamente usando todos los movimientos.`;

      alert(resumen);
      
    } catch (error) {
      console.error('‚ùå Error procesando cartola:', error);
      
      let mensajeError = `‚ùå Error procesando el archivo ${file.name}:\n\n${error.message}`;
      
      if (error.message.includes('XLSX')) {
        mensajeError += `\n\nüí° Este error est√° relacionado con la carga de la librer√≠a Excel.`;
      } else if (error.message.includes('No se encontraron movimientos')) {
        mensajeError += `\n\nüîß Posibles causas:\n`;
        mensajeError += `‚Ä¢ El formato del archivo no coincide con los bancos soportados\n`;
        mensajeError += `‚Ä¢ Los datos podr√≠an estar en una hoja diferente\n`;
        mensajeError += `‚Ä¢ Revisa los logs de la consola para m√°s detalles (F12)`;
      } else if (error.message.includes('detectar el inicio')) {
        mensajeError += `\n\nüîß Problema de formato:\n`;
        mensajeError += `‚Ä¢ La estructura del archivo no es reconocida\n`;
        mensajeError += `‚Ä¢ Verifica que sea una cartola bancaria v√°lida`;
      }
      
      setErrorCartola(mensajeError);
    } finally {
      setIsLoadingCartola(false);
    }
  };

  // ===== RESTO DE FUNCIONES (mantener exactamente igual) =====

  const calcularEstadisticasCartola = (movimientos) => {
    if (!movimientos || movimientos.length === 0) {
      return {
        totalIngresos: 0,
        totalEgresos: 0,
        flujoNeto: 0,
        saldoFinal: 0,
        promedioIngreso: 0,
        promedioEgreso: 0
      };
    }

    const ingresos = movimientos.filter(mov => (mov.abono || 0) > 0);
    const egresos = movimientos.filter(mov => (mov.cargo || 0) > 0);

    const totalIngresos = ingresos.reduce((sum, mov) => sum + (mov.abono || 0), 0);
    const totalEgresos = egresos.reduce((sum, mov) => sum + (mov.cargo || 0), 0);

    const movimientosOrdenados = movimientos.sort((a, b) => new Date(a.fecha) - new Date(b.fecha));
    const saldoFinal = movimientosOrdenados.length > 0 ?
      movimientosOrdenados[movimientosOrdenados.length - 1].saldo || 0 : 0;

    return {
      totalIngresos,
      totalEgresos,
      flujoNeto: totalIngresos - totalEgresos,
      saldoFinal,
      promedioIngreso: ingresos.length > 0 ? totalIngresos / ingresos.length : 0,
      promedioEgreso: egresos.length > 0 ? totalEgresos / egresos.length : 0
    };
  };

  // TODAS LAS FUNCIONES DE FILTRADO Y PAGINACI√ìN (mantener exactas)
  const obtenerComprasFiltradas = () => {
    let comprasFiltradas = cuentasPorPagar;

    if (filtroCompras.soloNoPagadas) {
      comprasFiltradas = filtrarComprasPendientes(comprasFiltradas);
    }

    if (filtroCompras.fechaInicio && filtroCompras.fechaFin) {
      comprasFiltradas = filtrarComprasPorFecha(comprasFiltradas, filtroCompras.fechaInicio, filtroCompras.fechaFin);
    }

    if (filtroCompras.folioFiltro) {
      comprasFiltradas = comprasFiltradas.filter(compra =>
        (compra.numero || '').toString().toLowerCase().includes(filtroCompras.folioFiltro.toLowerCase()) ||
        (compra.proveedor || '').toLowerCase().includes(filtroCompras.folioFiltro.toLowerCase())
      );
    }

    return comprasFiltradas;
  };

  const obtenerComprasPaginadas = () => {
    const filtradas = obtenerComprasFiltradas();
    const inicio = (paginacionCompras.paginaActual - 1) * paginacionCompras.itemsPorPagina;
    const fin = inicio + paginacionCompras.itemsPorPagina;
    return filtradas.slice(inicio, fin);
  };

  const obtenerCobrarPaginadas = () => {
    const inicio = (paginacionCobrar.paginaActual - 1) * paginacionCobrar.itemsPorPagina;
    const fin = inicio + paginacionCobrar.itemsPorPagina;
    return cuentasPorCobrar.slice(inicio, fin);
  };

  const totalPaginasCompras = Math.ceil(obtenerComprasFiltradas().length / paginacionCompras.itemsPorPagina);
  const totalPaginasCobrar = Math.ceil(cuentasPorCobrar.length / paginacionCobrar.itemsPorPagina);

  const formatearMoneda = (monto) => {
    if (typeof monto !== 'number') return '$0';
    return new Intl.NumberFormat('es-CL', {
      style: 'currency',
      currency: 'CLP',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }).format(monto);
  };

  const normalizarNombreBanco = (bancoStr) => {
    if (!bancoStr) return 'generico';
    
    const mapeoNombres = {
      'banco de chile': 'banco_chile',
      'banco chile': 'banco_chile',
      'bci': 'bci',
      'banco de credito': 'bci',
      'banco de credito e inversiones': 'bci',
      'santander': 'santander',
      'banco santander': 'santander',
      'santander chile': 'santander',
      'banco internacional': 'internacional',
      'internacional': 'internacional',
      'formato generico': 'generico',
      'generico': 'generico'
    };
    
    return mapeoNombres[bancoStr] || bancoStr.replace(/\s+/g, '_');
  };

  // ===== EFECTOS (mantener exactos) =====
  useEffect(() => {
    cargarDatosIniciales();
  }, []);

  useEffect(() => {
    if (saldosBancarios.length > 0 || Object.keys(saldosTotalesCartolas).length > 0) {
      calcularKPIsIntegrados();
    }
  }, [saldosBancarios, saldosTotalesCartolas, cuentasPorCobrar, cuentasPorPagar]);

  const cargarDatosIniciales = async () => {
    setLoading(true);
    try {
      // Cargar datos de Chipax
      const [saldosResp, cobrarResp, pagarResp] = await Promise.all([
        chipaxService.obtenerSaldosBancarios(),
        chipaxService.obtenerCuentasPorCobrar(),
        chipaxService.obtenerCuentasPorPagar()
      ]);

      setSaldosBancarios(saldosResp.items || []);
      setCuentasPorCobrar(adaptarCuentasPorCobrar(cobrarResp.items || []));
      setCuentasPorPagar(adaptarCuentasPorPagar(pagarResp.items || []));

      // ‚úÖ CARGAR DATOS PERSISTIDOS CON MANEJO DE ERRORES
      try {
        const movimientosGuardados = JSON.parse(localStorage.getItem('pgr_movimientos_bancarios') || '[]');
        const cartolasGuardadas = JSON.parse(localStorage.getItem('pgr_cartolas_cargadas') || '[]');

        console.log(`üìä Cargando datos persistidos:`);
        console.log(`   üìã Movimientos: ${movimientosGuardados.length}`);
        console.log(`   üìÅ Cartolas: ${cartolasGuardadas.length}`);

        if (movimientosGuardados.length > 0) {
          // Validar que los movimientos tengan estructura correcta
          const movimientosValidos = movimientosGuardados.filter(mov => 
            mov && mov.fecha && mov.descripcion && mov.banco
          );
          
          if (movimientosValidos.length !== movimientosGuardados.length) {
            console.log(`‚ö†Ô∏è Se encontraron ${movimientosGuardados.length - movimientosValidos.length} movimientos inv√°lidos`);
          }
          
          setMovimientosBancarios(movimientosValidos);
          actualizarSaldosTotales(movimientosValidos);
        }

        if (cartolasGuardadas.length > 0) {
          // Validar que las cartolas tengan estructura correcta
          const cartolasValidas = cartolasGuardadas.filter(cartola =>
            cartola && cartola.nombre && cartola.banco && cartola.fechaCarga
          );
          
          if (cartolasValidas.length !== cartolasGuardadas.length) {
            console.log(`‚ö†Ô∏è Se encontraron ${cartolasGuardadas.length - cartolasValidas.length} cartolas inv√°lidas`);
          }
          
          setCartolasCargadas(cartolasValidas);
        }

        console.log(`‚úÖ Datos persistidos cargados exitosamente`);
        
      } catch (storageError) {
        console.error('‚ùå Error cargando datos persistidos:', storageError);
        console.log('üßπ Limpiando localStorage corrupto...');
        
        // Limpiar datos corruptos
        localStorage.removeItem('pgr_movimientos_bancarios');
        localStorage.removeItem('pgr_cartolas_cargadas');
        
        alert(`‚ö†Ô∏è Se detectaron datos corruptos en el almacenamiento local.\n\nLos datos se han limpiado autom√°ticamente.\n\nPuedes volver a cargar tus cartolas.`);
      }

    } catch (error) {
      console.error('Error cargando datos:', error);
      setErrors([`Error cargando datos: ${error.message}`]);
    } finally {
      setLoading(false);
    }
  };

  // ===== RENDERIZADO PRINCIPAL =====
  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-md">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center gap-4">
              <button
                onClick={onBack}
                className="p-2 rounded-lg bg-gray-100 hover:bg-gray-200 transition-colors"
              >
                <ChevronLeft className="w-5 h-5" />
              </button>
              <h1 className="text-xl font-bold text-gray-900">üíº Dashboard Financiero Integrado</h1>
            </div>
            <div className="flex items-center gap-4">
              <div className="text-sm text-gray-600">
                ‚úÖ Detecci√≥n mejorada por n√∫mero de cuenta
              </div>
              <div className="text-xs px-2 py-1 rounded-full" style={{
                backgroundColor: typeof window.XLSX !== 'undefined' && typeof window.XLSX.read === 'function' ? '#22c55e' : '#ef4444',
                color: 'white'
              }}>
                XLSX: {typeof window.XLSX !== 'undefined' && typeof window.XLSX.read === 'function' ? 'OK' : 'ERROR'}
              </div>
              <button
                onClick={onLogout}
                className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
              >
                Logout
              </button>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        
        {/* Pesta√±as de navegaci√≥n */}
        <div className="flex space-x-1 bg-gray-200 p-1 rounded-lg mb-6">
          {[
            { id: 'dashboard', label: 'üìä Dashboard', icon: BarChart3 },
            { id: 'cartolas', label: 'üìÑ Cartolas Bancarias', icon: Upload },
            { id: 'saldos', label: 'üí∞ Saldos Detallados', icon: Wallet },
            { id: 'compras', label: 'üõí Compras', icon: FileText },
            { id: 'debug', label: 'üîß Debug', icon: Bug }
          ].map(tab => (
            <button
              key={tab.id}
              onClick={() => setPestanaActiva(tab.id)}
              className={`flex-1 flex items-center justify-center gap-2 py-3 px-4 rounded-md font-medium transition-all ${
                pestanaActiva === tab.id
                  ? 'bg-white text-blue-600 shadow-sm'
                  : 'text-gray-600 hover:text-gray-900'
              }`}
            >
              <tab.icon size={18} />
              {tab.label}
            </button>
          ))}
        </div>

        {/* Contenido de las pesta√±as */}
        {pestanaActiva === 'cartolas' && (
          <div className="space-y-6">
            <div className="bg-white rounded-xl shadow-sm p-6">
              <h2 className="text-xl font-bold mb-4 flex items-center gap-2">
                <Upload className="text-blue-500" />
                üìÑ Gesti√≥n de Cartolas Bancarias
              </h2>
              
              {/* Botones de utilidad mejorados */}
              <div className="flex items-center gap-3 mb-4 flex-wrap">
                <button
                  onClick={diagnosticarXLSX}
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm"
                >
                  üîç Diagnosticar XLSX
                </button>
                <button
                  onClick={async () => {
                    console.log('üîÑ Recargando XLSX...');
                    // Eliminar scripts existentes
                    document.querySelectorAll('script[data-xlsx-loaded]').forEach(script => {
                      script.remove();
                    });
                    // Limpiar variables globales
                    if (window.XLSX) delete window.XLSX;
                    console.log('‚úÖ XLSX limpiado. Intenta cargar una cartola nuevamente.');
                    alert('XLSX limpiado. Intenta cargar una cartola nuevamente.');
                  }}
                  className="px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition-colors text-sm"
                >
                  üîÑ Limpiar XLSX
                </button>
                <button
                  onClick={() => {
                    setModoAltoRendimiento(!modoAltoRendimiento);
                    const mensaje = !modoAltoRendimiento 
                      ? `üöÄ Modo Alto Rendimiento ACTIVADO:\n\n‚úÖ Procesa archivos de cualquier tama√±o\n‚úÖ Mantiene TODOS los movimientos en memoria\n‚úÖ C√°lculos de saldos 100% precisos\n‚ö†Ô∏è Los datos no se guardan en localStorage\nüí° Ideal para archivos muy grandes`
                      : `üíæ Modo Normal ACTIVADO:\n\n‚úÖ Guarda datos en localStorage\n‚úÖ Persistencia entre sesiones\n‚ö†Ô∏è Limitado por capacidad del navegador`;
                    
                    alert(mensaje);
                    console.log(`üöÄ Modo alto rendimiento: ${!modoAltoRendimiento ? 'ACTIVADO' : 'DESACTIVADO'}`);
                  }}
                  className={`px-4 py-2 rounded-lg transition-colors text-sm ${
                    modoAltoRendimiento 
                      ? 'bg-green-600 text-white hover:bg-green-700' 
                      : 'bg-gray-600 text-white hover:bg-gray-700'
                  }`}
                >
                  {modoAltoRendimiento ? 'üöÄ Alto Rendimiento ON' : 'üíæ Modo Normal'}
                </button>
                <button
                  onClick={() => {
                    if (confirm('¬øEst√°s seguro de eliminar todas las cartolas y movimientos guardados?\n\nEsta acci√≥n no se puede deshacer.')) {
                      // Limpiar localStorage
                      localStorage.removeItem('pgr_movimientos_bancarios');
                      localStorage.removeItem('pgr_cartolas_cargadas');
                      
                      // Limpiar estados
                      setMovimientosBancarios([]);
                      setCartolasCargadas([]);
                      setSaldosTotalesCartolas({});
                      
                      // Desactivar modo alto rendimiento
                      setModoAltoRendimiento(false);
                      
                      console.log('üßπ Datos de cartolas limpiados');
                      alert('‚úÖ Todas las cartolas han sido eliminadas.\nüîÑ Modo normal reactivado.');
                    }
                  }}
                  className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors text-sm"
                >
                  üßπ Limpiar Todo
                </button>
                <button
                  onClick={() => {
                    const storageSize = ((JSON.stringify(localStorage).length / 1024 / 1024).toFixed(2));
                    const info = `üìä INFORMACI√ìN DE ALMACENAMIENTO:

üíæ LocalStorage usado: ${storageSize} MB
üìÅ Cartolas cargadas: ${cartolasCargadas.length}
üìã Movimientos totales: ${movimientosBancarios.length}
üè¶ Bancos procesados: ${Object.keys(saldosTotalesCartolas).length}

üöÄ MODO ACTUAL: ${modoAltoRendimiento ? 'Alto Rendimiento (Solo memoria)' : 'Normal (Con persistencia)'}

üîß ESTADO DEL SISTEMA:
‚Ä¢ XLSX disponible: ${typeof window.XLSX !== 'undefined' ? '‚úÖ' : '‚ùå'}
‚Ä¢ XLSX.read funcional: ${typeof window.XLSX?.read === 'function' ? '‚úÖ' : '‚ùå'}
‚Ä¢ Conexi√≥n: ${navigator.onLine ? '‚úÖ Online' : '‚ùå Offline'}

üí° PARA ARCHIVOS GRANDES:
‚Ä¢ Activa "üöÄ Alto Rendimiento" antes de cargar
‚Ä¢ Esto procesar√° TODOS los movimientos sin limitaciones
‚Ä¢ Los saldos ser√°n 100% precisos
‚Ä¢ Los datos no se guardar√°n en localStorage (solo memoria)

üîß Si tienes problemas:
1. Usa "üöÄ Alto Rendimiento" para archivos grandes
2. Usa "üßπ Limpiar Todo" si hay errores de memoria
3. Usa "üîÑ Limpiar XLSX" si hay problemas con Excel
4. Recarga la p√°gina (Ctrl+F5) como √∫ltimo recurso`;
                    
                    alert(info);
                  }}
                  className="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors text-sm"
                >
                  üìä Info Sistema
                </button>
              </div>

              {/* Informaci√≥n del estado actual mejorada */}
              <div className={`rounded-lg p-4 mb-4 text-sm border-2 ${
                modoAltoRendimiento 
                  ? 'bg-green-50 border-green-200' 
                  : 'bg-gray-50 border-gray-200'
              }`}>
                <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
                  <div>
                    <span className="font-medium text-gray-700">üíæ Almacenamiento:</span>
                    <div className="text-blue-600">
                      {((JSON.stringify(localStorage).length / 1024 / 1024).toFixed(2))} MB
                    </div>
                  </div>
                  <div>
                    <span className="font-medium text-gray-700">üìÅ Cartolas:</span>
                    <div className="text-green-600">{cartolasCargadas.length}</div>
                  </div>
                  <div>
                    <span className="font-medium text-gray-700">üìã Movimientos:</span>
                    <div className="text-orange-600">{movimientosBancarios.length}</div>
                  </div>
                  <div>
                    <span className="font-medium text-gray-700">üè¶ Bancos:</span>
                    <div className="text-purple-600">{Object.keys(saldosTotalesCartolas).length}</div>
                  </div>
                  <div>
                    <span className="font-medium text-gray-700">‚ö° Modo:</span>
                    <div className={modoAltoRendimiento ? 'text-green-600 font-semibold' : 'text-gray-600'}>
                      {modoAltoRendimiento ? 'üöÄ Alto Rendimiento' : 'üíæ Normal'}
                    </div>
                  </div>
                </div>
                {modoAltoRendimiento && (
                  <div className="mt-3 p-3 bg-green-100 rounded-lg border border-green-300">
                    <p className="text-green-800 text-sm font-medium">
                      üöÄ Modo Alto Rendimiento Activo: Se procesar√°n TODOS los movimientos sin limitaciones. 
                      Los datos se mantienen solo en memoria para m√°ximo rendimiento.
                    </p>
                  </div>
                )}
              </div>

              {/* √Årea de carga de archivos */}
              <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 mb-6">
                <input
                  type="file"
                  accept=".xlsx,.xls"
                  onChange={(e) => {
                    const file = e.target.files[0];
                    if (file) procesarCartolaBAncaria(file);
                  }}
                  className="hidden"
                  id="cartola-upload"
                  disabled={isLoadingCartola}
                />
                <label
                  htmlFor="cartola-upload"
                  className={`cursor-pointer block text-center ${
                    isLoadingCartola ? 'cursor-not-allowed opacity-50' : ''}`}
                >
                  <div className="space-y-4">
                    <div className="mx-auto w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center">
                      <Upload className="w-8 h-8 text-blue-500" />
                    </div>
                    <div>
                      <p className="text-lg font-medium text-gray-900">
                        Seleccionar archivo Excel
                      </p>
                      <p className="text-sm text-gray-500">
                        Formatos soportados: .xlsx, .xls
                      </p>
                      <p className="text-xs text-gray-400 mt-2">
                        ‚úÖ Detecci√≥n mejorada: Banco de Chile, BCI, Santander, Internacional
                      </p>
                      <p className="text-xs text-blue-500 mt-1">
                        üîß Estado XLSX: {typeof window.XLSX !== 'undefined' ? 
                          (typeof window.XLSX.read === 'function' ? '‚úÖ Listo' : '‚ö†Ô∏è Parcial') : 
                          '‚ùå No cargado'}
                      </p>
                      {modoAltoRendimiento && (
                        <p className="text-xs text-green-600 mt-1 font-semibold">
                          üöÄ Modo Alto Rendimiento: Sin limitaciones de movimientos
                        </p>
                      )}
                    </div>
                  </div>
                </label>
              </div>
              
              {isLoadingCartola && (
                <div className="mt-4 p-4 bg-blue-50 rounded-lg">
                  <div className="flex items-center gap-3">
                    <RefreshCw className="animate-spin text-blue-500" size={20} />
                    <div>
                      <p className="font-medium text-blue-800">Procesando cartola...</p>
                      <p className="text-sm text-blue-600">
                        Cargando XLSX ‚Üí Detectando banco ‚Üí Procesando movimientos
                      </p>
                    </div>
                  </div>
                </div>
              )}
              
              {errorCartola && (
                <div className="mt-4 bg-red-50 border border-red-200 rounded-lg p-4">
                  <div className="flex items-start gap-3">
                    <AlertCircle className="text-red-500 mt-1 flex-shrink-0" size={20} />
                    <div className="flex-1">
                      <h4 className="font-semibold text-red-800 mb-2">Error procesando cartola</h4>
                      <pre className="text-sm text-red-700 whitespace-pre-wrap font-mono bg-red-100 p-3 rounded">
                        {errorCartola}
                      </pre>
                      <button
                        onClick={() => setErrorCartola(null)}
                        className="mt-3 px-3 py-1 bg-red-600 text-white text-sm rounded hover:bg-red-700"
                      >
                        Cerrar
                      </button>
                    </div>
                  </div>
                </div>
              )}

              {/* Lista de cartolas cargadas */}
              {cartolasCargadas.length > 0 && (
                <div className="mt-6">
                  <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
                    <FileText className="text-green-500" />
                    Cartolas Cargadas ({cartolasCargadas.length})
                  </h3>
                  <div className="space-y-3">
                    {cartolasCargadas.map((cartola) => (
                      <div key={cartola.id} className="bg-gray-50 rounded-lg p-4 flex items-center justify-between">
                        <div className="flex-1">
                          <div className="flex items-center gap-3 mb-2">
                            <h4 className="font-medium text-gray-900">{cartola.nombre}</h4>
                            <span className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">
                              {cartola.banco}
                            </span>
                          </div>
                          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm text-gray-600">
                            <div>
                              <span className="font-medium">Movimientos:</span> 
                              {cartola.movimientos}
                            </div>
                            <div>
                              <span className="font-medium">Ingresos:</span> {formatearMoneda(cartola.totalIngresos)}
                            </div>
                            <div>
                              <span className="font-medium">Egresos:</span> {formatearMoneda(cartola.totalEgresos)}
                            </div>
                            <div>
                              <span className="font-medium">Saldo Final:</span> 
                              <span className={cartola.saldoFinal >= 0 ? 'text-green-600' : 'text-red-600'}>
                                {formatearMoneda(cartola.saldoFinal)}
                              </span>
                            </div>
                          </div>
                          <div className="mt-2 text-xs text-gray-500">
                            Cargado: {new Date(cartola.fechaCarga).toLocaleString()}
                          </div>
                        </div>
                        <div className="flex items-center gap-2">
                          <button
                            onClick={() => eliminarCartola(cartola.id)}
                            className="p-2 text-red-600 hover:bg-red-100 rounded-lg transition-colors"
                            title="Eliminar cartola"
                          >
                            <Trash2 size={18} />
                          </button>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Resumen de saldos por banco */}
              {Object.keys(saldosTotalesCartolas).length > 0 && (
                <div className="mt-6">
                  <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
                    <Target className="text-purple-500" />
                    üí∞ Saldos por Banco
                  </h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    {Object.entries(saldosTotalesCartolas).map(([banco, data]) => (
                      <div key={banco} className="bg-gradient-to-br from-blue-50 to-indigo-50 rounded-lg p-4 border border-blue-200">
                        <h4 className="font-semibold text-gray-900 mb-3 flex items-center gap-2">
                          üè¶ {banco}
                        </h4>
                        <div className="space-y-2 text-sm">
                          <div className="flex justify-between">
                            <span className="text-gray-600">Saldo Final:</span>
                            <span className={`font-semibold ${data.ultimoSaldo >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                              {formatearMoneda(data.ultimoSaldo)}
                            </span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-gray-600">Total Ingresos:</span>
                            <span className="text-green-600">{formatearMoneda(data.totalIngresos)}</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-gray-600">Total Egresos:</span>
                            <span className="text-red-600">{formatearMoneda(data.totalEgresos)}</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-gray-600">Movimientos:</span>
                            <span className="text-blue-600">{data.movimientos?.length || 0}</span>
                          </div>
                          {data.ultimaActualizacion && (
                            <div className="text-xs text-gray-500 mt-2">
                              √öltima actualizaci√≥n: {new Date(data.ultimaActualizacion).toLocaleDateString()}
                            </div>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>
        )}

        {/* Aqu√≠ van las otras pesta√±as existentes (dashboard, saldos, compras, debug) - mantener exactamente igual */}
        {pestanaActiva === 'dashboard' && (
          <div className="space-y-6">
            {/* KPIs principales */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <div className="bg-white rounded-xl shadow-sm p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-600">üí∞ Liquidez Total</p>
                    <p className="text-2xl font-bold text-green-600">
                      {formatearMoneda(kpisConsolidados.liquidezTotal || 0)}
                    </p>
                    <div className="text-xs text-gray-500 mt-1">
                      Chipax: {formatearMoneda(kpisConsolidados.saldoChipax || 0)}
                    </div>
                    <div className="text-xs text-gray-500">
                      Cartolas: {formatearMoneda(kpisConsolidados.saldoCartolas || 0)}
                    </div>
                  </div>
                  <Wallet className="h-12 w-12 text-green-500" />
                </div>
              </div>

              <div className="bg-white rounded-xl shadow-sm p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-600">üìä Cobertura Cuentas</p>
                    <p className="text-2xl font-bold text-blue-600">
                      {((kpisConsolidados.coberturaCuentas || 0) * 100).toFixed(1)}%
                    </p>
                  </div>
                  <PieChart className="h-12 w-12 text-blue-500" />
                </div>
              </div>

              <div className="bg-white rounded-xl shadow-sm p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-600">üéØ Ratio Cobranza/Pago</p>
                    <p className="text-2xl font-bold text-purple-600">
                      {(kpisConsolidados.ratioCobranzaPago || 0).toFixed(2)}
                    </p>
                  </div>
                  <Target className="h-12 w-12 text-purple-500" />
                </div>
              </div>

              <div className="bg-white rounded-xl shadow-sm p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-600">‚ö° Efectivo Operacional</p>
                    <p className={`text-2xl font-bold ${(kpisConsolidados.efectivoOperacional || 0) >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                      {formatearMoneda(kpisConsolidados.efectivoOperacional || 0)}
                    </p>
                  </div>
                  <Activity className="h-12 w-12 text-orange-500" />
                </div>
              </div>
            </div>

            {/* Alertas financieras */}
            {alertasFinancieras.length > 0 && (
              <div className="bg-white rounded-xl shadow-sm p-6">
                <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
                  <AlertCircle className="text-yellow-500" />
                  üö® Alertas Financieras
                </h3>
                <div className="space-y-3">
                  {alertasFinancieras.map((alerta, index) => (
                    <div key={index} className={`p-4 rounded-lg border-l-4 ${
                      alerta.tipo === 'error' ? 'bg-red-50 border-red-400' : 'bg-yellow-50 border-yellow-400'
                    }`}>
                      <p className={`font-medium ${
                        alerta.tipo === 'error' ? 'text-red-800' : 'text-yellow-800'
                      }`}>
                        {alerta.mensaje}
                      </p>
                      {alerta.valor !== undefined && (
                        <p className={`text-sm mt-1 ${
                          alerta.tipo === 'error' ? 'text-red-600' : 'text-yellow-600'
                        }`}>
                          Valor: {typeof alerta.valor === 'number' ? formatearMoneda(alerta.valor) : alerta.valor}
                        </p>
                      )}
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        )}

        {/* Resto de pesta√±as - mantener c√≥digo existente exacto */}
        {/* ... aqu√≠ van todas las otras pesta√±as sin cambios ... */}

      </div>
    </div>
  );
};

export default DashboardFinancieroIntegrado;
